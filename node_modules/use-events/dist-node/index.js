'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var ResizeObserver = _interopDefault(require('resize-observer-polyfill'));

function useActive() {
  const [isActive, setActive] = React.useState(false);
  const bind = React.useMemo(() => ({
    onMouseDown: e => void setActive(true),
    onMouseUp: e => void setActive(false)
  }), []);
  return [isActive, bind];
}

function useClickOutside(refs, onClickOutside) {
  const [isActive, setActive] = React.useState(false);
  const isOutside = React.useCallback(e => {
    const test = refs.map(ref => {
      return ref.current !== null && !ref.current.contains(e.target);
    });
    return test.every(Boolean);
  }, [refs]);
  const mousedown = React.useCallback(e => {
    if (isOutside(e)) {
      setActive(true);
      onClickOutside(e);
    }
  }, [isOutside, onClickOutside]);
  const mouseup = React.useCallback(e => {
    if (isOutside(e)) {
      setActive(false);
    }
  }, [isOutside]);
  React.useEffect(() => {
    document.addEventListener('mousedown', mousedown);
    document.addEventListener('mouseup', mouseup);
    return () => {
      document.removeEventListener('mousedown', mousedown);
      document.removeEventListener('mouseup', mouseup);
    };
  }, [refs, onClickOutside]);
  return [isActive];
}

function useFocus() {
  const [isFocused, setFocused] = React.useState(false);
  const bind = React.useMemo(() => ({
    onFocus: e => void setFocused(true),
    onBlur: e => void setFocused(false)
  }), []);
  return [isFocused, bind];
}

function useHover() {
  const [isHovered, setHovered] = React.useState(false);
  const bind = React.useMemo(() => ({
    onMouseEnter: e => void setHovered(true),
    onMouseLeave: e => void setHovered(false)
  }), []);
  return [isHovered, bind];
}

function useMousePosition() {
  const [x, setX] = React.useState(0);
  const [y, setY] = React.useState(0);
  const bind = React.useMemo(() => ({
    onMouseMove: e => {
      setX(e.nativeEvent.offsetX);
      setY(e.nativeEvent.offsetY);
    }
  }), []);
  return [x, y, bind];
}

function useResizeObserver(ref) {
  const animationFrameID = React.useRef();
  const [width, setWidth] = React.useState(0);
  const [height, setHeight] = React.useState(0);
  React.useLayoutEffect(() => {
    // https://github.com/microsoft/TypeScript/issues/37861
    // @ts-ignore
    const resizeObserver = new ResizeObserver(entries => {
      if (!Array.isArray(entries) || entries.length === 0) {
        return;
      }

      const {
        width,
        height
      } = entries[0].contentRect; // https://github.com/WICG/resize-observer/issues/38

      animationFrameID.current = requestAnimationFrame(() => {
        setWidth(width);
        setHeight(height);
      });
    });

    if (ref.current !== null) {
      resizeObserver.observe(ref.current);
    }

    return () => {
      if (animationFrameID.current) {
        cancelAnimationFrame(animationFrameID.current);
      }

      resizeObserver.disconnect();
    };
  }, [ref]);
  return [width, height];
}

function useTouch() {
  const [isTouched, setTouched] = React.useState(false);
  const bind = React.useMemo(() => ({
    onTouchStart: e => void setTouched(true),
    onTouchEnd: e => void setTouched(false)
  }), []);
  return [isTouched, bind];
}

function useWindowResize() {
  const [width, setWidth] = React.useState(window.innerWidth);
  const [height, setHeight] = React.useState(window.innerHeight);
  const resize = React.useCallback(() => {
    setWidth(window.innerWidth);
    setHeight(window.innerHeight);
  }, []);
  React.useEffect(() => {
    window.addEventListener('resize', resize);
    return () => void window.removeEventListener('resize', resize);
  }, [resize]);
  return [width, height];
}

exports.useActive = useActive;
exports.useClickOutside = useClickOutside;
exports.useFocus = useFocus;
exports.useHover = useHover;
exports.useMousePosition = useMousePosition;
exports.useResizeObserver = useResizeObserver;
exports.useTouch = useTouch;
exports.useWindowResize = useWindowResize;
//# sourceMappingURL=index.js.map
