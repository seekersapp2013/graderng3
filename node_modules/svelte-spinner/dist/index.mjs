import { SvelteComponent, init, safe_not_equal, element, append, svg_element, attr, set_style, insert, noop, detach } from 'svelte/internal';

/* src/index.svelte generated by Svelte v3.15.0 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1bbsd2f-style";
	style.textContent = ".svelte-spinner.svelte-1bbsd2f{transition-property:transform;animation-name:svelte-1bbsd2f-svelte-spinner_infinite-spin;animation-iteration-count:infinite;animation-timing-function:linear}@keyframes svelte-1bbsd2f-svelte-spinner_infinite-spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let svg;
	let circle;
	let circle_stroke_dasharray_value;

	return {
		c() {
			svg = svg_element("svg");
			circle = svg_element("circle");
			attr(circle, "role", "presentation");
			attr(circle, "cx", "16");
			attr(circle, "cy", "16");
			attr(circle, "r", ctx.radius);
			attr(circle, "stroke", ctx.color);
			attr(circle, "fill", "none");
			attr(circle, "stroke-width", ctx.thickness);
			attr(circle, "stroke-dasharray", circle_stroke_dasharray_value = "" + (ctx.dash + ",100"));
			attr(circle, "stroke-linecap", "round");
			attr(svg, "height", ctx.size);
			attr(svg, "width", ctx.size);
			set_style(svg, "animation-duration", ctx.speed + "ms");
			attr(svg, "class", "svelte-spinner svelte-1bbsd2f");
			attr(svg, "viewBox", "0 0 32 32");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, circle);
		},
		p(changed, ctx) {
			if (changed.radius) {
				attr(circle, "r", ctx.radius);
			}

			if (changed.color) {
				attr(circle, "stroke", ctx.color);
			}

			if (changed.thickness) {
				attr(circle, "stroke-width", ctx.thickness);
			}

			if (changed.dash && circle_stroke_dasharray_value !== (circle_stroke_dasharray_value = "" + (ctx.dash + ",100"))) {
				attr(circle, "stroke-dasharray", circle_stroke_dasharray_value);
			}

			if (changed.size) {
				attr(svg, "height", ctx.size);
			}

			if (changed.size) {
				attr(svg, "width", ctx.size);
			}

			if (changed.speed) {
				set_style(svg, "animation-duration", ctx.speed + "ms");
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { size = 25 } = $$props;
	let { speed = 750 } = $$props;
	let { color = "rgba(0,0,0,0.4)" } = $$props;
	let { thickness = 2 } = $$props;
	let { gap = 40 } = $$props;
	let { radius = 10 } = $$props;
	let dash;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate("size", size = $$props.size);
		if ("speed" in $$props) $$invalidate("speed", speed = $$props.speed);
		if ("color" in $$props) $$invalidate("color", color = $$props.color);
		if ("thickness" in $$props) $$invalidate("thickness", thickness = $$props.thickness);
		if ("gap" in $$props) $$invalidate("gap", gap = $$props.gap);
		if ("radius" in $$props) $$invalidate("radius", radius = $$props.radius);
	};

	$$self.$$.update = (changed = { radius: 1, gap: 1 }) => {
		if (changed.radius || changed.gap) {
			 $$invalidate("dash", dash = 2 * Math.PI * radius * (100 - gap) / 100);
		}
	};

	return {
		size,
		speed,
		color,
		thickness,
		gap,
		radius,
		dash
	};
}

class Src extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1bbsd2f-style")) add_css();

		init(this, options, instance, create_fragment, safe_not_equal, {
			size: 0,
			speed: 0,
			color: 0,
			thickness: 0,
			gap: 0,
			radius: 0
		});
	}
}

export default Src;
