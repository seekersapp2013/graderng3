import { AppConfig, UserSession } from 'blockstack';
import React, { createContext, useReducer, useContext, useState, useEffect } from 'react';
import { Box, Flex, Text, Spinner, PseudoBox, Button, Stack, ThemeProvider, theme, ScopedCSSReset, Modal as Modal$1, ChevronIcon } from '@blockstack/ui';
import { useHover } from 'use-events';
import Styled from 'styled-components';
import { SECP256K1Client, TokenSigner } from 'jsontokens';
import { serializeCV } from '@blockstack/stacks-transactions';
import ReactDOM from 'react-dom';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

// Width 2px wider than in-page dialog.
// Ensures retina subpixel rounding
// does not leave slightly blurry underlap
var defaultWidth = 442;
var defaultHeight = 532;
var defaultTitle = 'Continue with Secret Key'; // https://developer.mozilla.org/en-US/docs/Web/API/Window/open

var popupCenter = function popupCenter(_ref) {
  var url = _ref.url,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? defaultTitle : _ref$title,
      _ref$w = _ref.w,
      w = _ref$w === void 0 ? defaultWidth : _ref$w,
      _ref$h = _ref.h,
      h = _ref$h === void 0 ? defaultHeight : _ref$h,
      skipPopupFallback = _ref.skipPopupFallback;
  var win = window; // Safari reports an incorrect browser height

  var isSafari = win.safari !== undefined;
  var browserViewport = {
    width: win.innerWidth,
    height: win.innerHeight
  };
  var browserToolbarHeight = win.outerHeight - win.innerHeight;
  var browserSidepanelWidth = win.outerWidth - win.innerWidth; // Such as fixed operating system UI

  var removeUnusableSpaceX = function removeUnusableSpaceX(coord) {
    return coord - (win.screen.width - win.screen.availWidth);
  };

  var removeUnusableSpaceY = function removeUnusableSpaceY(coord) {
    return coord - (win.screen.height - win.screen.availHeight);
  };

  var browserPosition = {
    x: removeUnusableSpaceX(win.screenX),
    y: removeUnusableSpaceY(win.screenY)
  };
  var left = browserPosition.x + browserSidepanelWidth + (browserViewport.width - w) / 2;
  var top = browserPosition.y + browserToolbarHeight + (browserViewport.height - h) / 2 + (isSafari ? 48 : 0);
  var options = {
    scrollbars: 'no',
    width: w,
    height: h,
    top: top,
    left: left
  };
  var optionsString = Object.keys(options).map(function (key) {
    return key + "=" + options[key];
  });
  var newWindow = window.open(url, title, optionsString.join(','));

  if (newWindow) {
    newWindow.focus();
    return newWindow;
  } // no popup options, just open the auth page


  if (skipPopupFallback) {
    return newWindow;
  }

  return window.open(url);
};
var setupListener = function setupListener(_ref2) {
  var popup = _ref2.popup,
      messageParams = _ref2.messageParams,
      onFinish = _ref2.onFinish,
      onCancel = _ref2.onCancel,
      authURL = _ref2.authURL;
  var lastPong = null; // Send a message to the authenticator popup at a consistent interval. This allows
  // the authenticator to 'respond'.

  var pingInterval = 250;
  var interval = setInterval(function () {
    if (popup) {
      try {
        console.log('about to ping');
        popup.postMessage(_extends({
          method: 'ping'
        }, messageParams), authURL.origin);
      } catch (error) {
        console.warn('[Blockstack] Unable to send ping to authentication service');
        clearInterval(interval);
      }
    } else {
      console.warn('[Blockstack] Unable to send ping to authentication service - popup closed');
    }

    if (lastPong && new Date().getTime() - lastPong > pingInterval * 2) {
      onCancel && onCancel();
      clearInterval(interval);
    }
  }, pingInterval);

  var receiveMessage = function receiveMessage(event) {
    try {
      if (event.data.method === 'pong') {
        lastPong = new Date().getTime();
        return Promise.resolve();
      }

      var _temp2 = function () {
        if (event.data.source === 'blockstack-app') {
          var data = event.data;
          return Promise.resolve(onFinish(data)).then(function () {
            window.focus();
            window.removeEventListener('message', receiveMessageCallback);
            clearInterval(interval);
          });
        }
      }();

      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var receiveMessageCallback = function receiveMessageCallback(event) {
    void receiveMessage(event);
  };

  window.addEventListener('message', receiveMessageCallback, false);
};

var version = "2.12.7";

var defaultAuthURL = 'https://app.blockstack.org';

if (typeof window !== 'undefined') {
  window.__CONNECT_VERSION__ = version;
}

var isMobile = function isMobile() {
  var ua = navigator.userAgent;

  if (/android/i.test(ua)) {
    return true;
  }

  if (/iPad|iPhone|iPod/.test(ua)) {
    return true;
  }

  if (/windows phone/i.test(ua)) {
    return true;
  }

  return false;
};
/**
 * mobile should not use a 'popup' type of window.
 */

var shouldUsePopup = function shouldUsePopup() {
  return !isMobile();
};
var getOrCreateUserSession = function getOrCreateUserSession(userSession) {
  if (!userSession) {
    var appConfig = new AppConfig(['store_write'], document.location.href);
    userSession = new UserSession({
      appConfig: appConfig
    });
  }

  return userSession;
};
var authenticate = function authenticate(_ref) {
  var _ref$redirectTo = _ref.redirectTo,
      redirectTo = _ref$redirectTo === void 0 ? '/' : _ref$redirectTo,
      manifestPath = _ref.manifestPath,
      finished = _ref.finished,
      onFinish = _ref.onFinish,
      onCancel = _ref.onCancel,
      authOrigin = _ref.authOrigin,
      _ref$sendToSignIn = _ref.sendToSignIn,
      sendToSignIn = _ref$sendToSignIn === void 0 ? false : _ref$sendToSignIn,
      _userSession = _ref.userSession,
      appDetails = _ref.appDetails;

  try {
    var _window$BlockstackPro;

    var userSession = getOrCreateUserSession(_userSession);

    if (userSession.isUserSignedIn()) {
      userSession.signUserOut();
    }

    var transitKey = userSession.generateAndStoreTransitKey();
    var authRequest = userSession.makeAuthRequest(transitKey, "" + document.location.origin + redirectTo, "" + document.location.origin + manifestPath, userSession.appConfig.scopes, undefined, undefined, {
      sendToSignIn: sendToSignIn,
      appDetails: appDetails,
      connectVersion: version
    });
    var params = window.location.search.substr(1).split('&').filter(function (param) {
      return param.startsWith('utm');
    }).map(function (param) {
      return param.split('=');
    });
    var urlParams = new URLSearchParams();
    params.forEach(function (_ref2) {
      var key = _ref2[0],
          value = _ref2[1];
      return urlParams.set(key, value);
    });
    urlParams.set('authRequest', authRequest);
    var path = sendToSignIn ? 'sign-in' : 'sign-up';
    return Promise.resolve((_window$BlockstackPro = window.BlockstackProvider) === null || _window$BlockstackPro === void 0 ? void 0 : _window$BlockstackPro.getURL()).then(function (extensionURL) {
      var authURL = new URL(extensionURL || authOrigin || defaultAuthURL);
      var url = authURL.origin + "/index.html#/" + path + "?" + urlParams.toString();

      if (shouldUsePopup()) {
        var popup = popupCenter({
          url: url,
          // If the extension is installed, dont worry about popup blocking
          // Otherwise, firefox will open the popup and a new tab.
          skipPopupFallback: !!window.BlockstackProvider
        });
        setupAuthListener({
          popup: popup,
          authRequest: authRequest,
          onFinish: onFinish || finished,
          authURL: authURL,
          userSession: userSession,
          onCancel: onCancel
        });
        return;
      }

      document.location.href = url;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var setupAuthListener = function setupAuthListener(_ref3) {
  var popup = _ref3.popup,
      authRequest = _ref3.authRequest,
      _onFinish = _ref3.onFinish,
      onCancel = _ref3.onCancel,
      authURL = _ref3.authURL,
      userSession = _ref3.userSession;
  setupListener({
    popup: popup,
    onCancel: onCancel,
    onFinish: function (data) {
      try {
        var _temp3 = function () {
          if (data.authRequest === authRequest) {
            var _temp4 = function () {
              if (_onFinish) {
                var authResponse = data.authResponse;
                return Promise.resolve(userSession.handlePendingSignIn(authResponse)).then(function () {
                  _onFinish({
                    authResponse: authResponse,
                    userSession: userSession
                  });
                });
              }
            }();

            if (_temp4 && _temp4.then) return _temp4.then(function () {});
          }
        }();

        return Promise.resolve(_temp3 && _temp3.then ? _temp3.then(function () {}) : void 0);
      } catch (e) {
        return Promise.reject(e);
      }
    },
    messageParams: {
      authRequest: authRequest
    },
    authURL: authURL
  });
};

var getUserData = function getUserData(userSession) {
  try {
    userSession = getOrCreateUserSession(userSession);

    if (userSession.isUserSignedIn()) {
      return Promise.resolve(userSession.loadUserData());
    }

    if (userSession.isSignInPending()) {
      return Promise.resolve(userSession.handlePendingSignIn());
    }

    return Promise.resolve(null);
  } catch (e) {
    return Promise.reject(e);
  }
};

var States;

(function (States) {
  States["MODAL_OPEN"] = "modal/open";
  States["MODAL_CLOSE"] = "modal/close";
  States["START_AUTH"] = "data/START_AUTH";
  States["FINISH_AUTH"] = "data/FINISH_AUTH";
  States["CANCEL_AUTH"] = "data/CANCEL_AUTH";
  States["UPDATE_AUTH_OPTIONS"] = "data/update-auth-options";
  States["SCREENS_INTRO"] = "screens/intro";
  States["SCREENS_HOW_IT_WORKS"] = "screens/how-it-works";
  States["SCREENS_SIGN_IN"] = "screens/sign-in";
})(States || (States = {}));

var initialState = {
  isOpen: false,
  isAuthenticating: false,
  screen: States.SCREENS_INTRO,
  authData: undefined,
  userSession: undefined,
  authOptions: {
    redirectTo: '',
    manifestPath: '',
    finished: function finished() {
      return null;
    },
    authOrigin: undefined,
    sendToSignIn: false,
    appDetails: {
      name: '',
      icon: ''
    }
  }
};

var connectReducer = function connectReducer(state, _ref) {
  var type = _ref.type,
      payload = _ref.payload;

  switch (type) {
    case States.MODAL_OPEN:
      {
        return _extends({}, state, {
          isOpen: true
        });
      }

    case States.MODAL_CLOSE:
      {
        return _extends({}, state, {
          isOpen: false
        });
      }

    case States.START_AUTH:
      {
        return _extends({}, state, {
          isAuthenticating: true
        });
      }

    case States.FINISH_AUTH:
      {
        return _extends({}, state, {
          isAuthenticating: false,
          authData: payload
        });
      }

    case States.CANCEL_AUTH:
      {
        return _extends({}, state, {
          isAuthenticating: false
        });
      }

    case States.SCREENS_INTRO:
      {
        return _extends({}, state, {
          screen: States.SCREENS_INTRO
        });
      }

    case States.SCREENS_HOW_IT_WORKS:
      {
        return _extends({}, state, {
          screen: States.SCREENS_HOW_IT_WORKS
        });
      }

    case States.SCREENS_SIGN_IN:
      {
        return _extends({}, state, {
          screen: States.SCREENS_SIGN_IN
        });
      }

    case States.UPDATE_AUTH_OPTIONS:
      {
        return _extends({}, state, {
          authOptions: _extends({}, state.authOptions, payload)
        });
      }

    default:
      {
        throw new Error("Unhandled action type: " + type);
      }
  }
};

var ConnectContext = /*#__PURE__*/createContext(initialState);
var ConnectDispatchContext = /*#__PURE__*/createContext(undefined);

var ConnectProvider = function ConnectProvider(_ref2) {
  var authOptions = _ref2.authOptions,
      children = _ref2.children;

  var _useReducer = useReducer(connectReducer, initialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  return React.createElement(ConnectContext.Provider, {
    value: _extends({}, state, {
      authOptions: authOptions
    })
  }, React.createElement(ConnectDispatchContext.Provider, {
    value: dispatch
  }, children));
};

var Logo = function Logo(props) {
  return React.createElement(Box, Object.assign({
    as: "svg",
    width: "24px",
    height: "24px",
    viewBox: "0 0 24 24",
    fill: "none"
  }, props), React.createElement("rect", {
    width: "24",
    height: "24",
    rx: "12",
    fill: "#E3E5FF"
  }), React.createElement("path", {
    d: "M15.2727 10.0179H14.8636V8.8125C14.8636 8.06658 14.5619 7.35121 14.0249 6.82376C13.4879 6.29632 12.7595 6 12 6C11.2405 6 10.5121 6.29632 9.9751 6.82376C9.43807 7.35121 9.13636 8.06658 9.13636 8.8125V10.0179H8.72727C8.40189 10.0182 8.08994 10.1453 7.85985 10.3713C7.62977 10.5973 7.50036 10.9036 7.5 11.2232V16.0446C7.50036 16.3642 7.62977 16.6706 7.85985 16.8966C8.08994 17.1225 8.40189 17.2497 8.72727 17.25H15.2727C15.5981 17.2497 15.9101 17.1225 16.1401 16.8966C16.3702 16.6706 16.4996 16.3642 16.5 16.0446V11.2232C16.4996 10.9036 16.3702 10.5973 16.1401 10.3713C15.9101 10.1453 15.5981 10.0182 15.2727 10.0179ZM9.95455 8.8125C9.95455 8.2797 10.17 7.76872 10.5536 7.39197C10.9372 7.01523 11.4575 6.80357 12 6.80357C12.5425 6.80357 13.0628 7.01523 13.4464 7.39197C13.83 7.76872 14.0455 8.2797 14.0455 8.8125V10.0179H9.95455V8.8125ZM12.4091 13.7231V14.6384C12.4091 14.745 12.366 14.8471 12.2893 14.9225C12.2126 14.9978 12.1085 15.0402 12 15.0402C11.8915 15.0402 11.7874 14.9978 11.7107 14.9225C11.634 14.8471 11.5909 14.745 11.5909 14.6384V13.7231C11.4349 13.6346 11.313 13.4981 11.2441 13.3347C11.1752 13.1712 11.1631 12.99 11.2097 12.8192C11.2563 12.6483 11.359 12.4973 11.5019 12.3896C11.6448 12.282 11.8199 12.2236 12 12.2236C12.1801 12.2236 12.3552 12.282 12.4981 12.3896C12.641 12.4973 12.7437 12.6483 12.7903 12.8192C12.8369 12.99 12.8248 13.1712 12.7559 13.3347C12.687 13.4981 12.5651 13.6346 12.4091 13.7231Z",
    fill: "#3700FF"
  }), React.createElement("rect", {
    x: "10.5",
    y: "11.25",
    width: "3",
    height: "5.25",
    fill: "#3700FF"
  }));
};

var Item = function Item(_ref) {
  var children = _ref.children;
  return React.createElement(Text, {
    fontSize: "14px",
    color: "ink.900"
  }, children);
};

var CheckList = function CheckList(_ref2) {
  var items = _ref2.items;
  return React.createElement(Box, null, items.map(function (item, key) {
    var Icon = item.icon;
    var text = item.text;
    return React.createElement(Flex, {
      px: "extra-loose",
      pb: "base-loose",
      pt: "base-loose",
      borderBottom: items.length - 1 !== key ? '1px solid' : 'unset',
      borderColor: "inherit",
      align: "center",
      textAlign: "left",
      key: key
    }, React.createElement(Box, {
      color: "blue",
      alignSelf: "stretch",
      mt: "extra-tight",
      mr: "base"
    }, React.createElement(Icon, null)), React.createElement(Item, null, text));
  }));
};

var buildEnterKeyEvent = function buildEnterKeyEvent(onClick) {
  return function (event) {
    if (event.key === 'Enter' && onClick) {
      onClick();
    }
  };
};
var Link = function Link(_ref) {
  var _ref$_hover = _ref._hover,
      _hover = _ref$_hover === void 0 ? {} : _ref$_hover,
      children = _ref.children,
      _ref$fontSize = _ref.fontSize,
      fontSize = _ref$fontSize === void 0 ? '12px' : _ref$fontSize,
      _ref$textStyle = _ref.textStyle,
      textStyle = _ref$textStyle === void 0 ? 'caption.medium' : _ref$textStyle,
      onClick = _ref.onClick,
      rest = _objectWithoutPropertiesLoose(_ref, ["_hover", "children", "fontSize", "textStyle", "onClick"]);

  return React.createElement(Box, Object.assign({}, rest, {
    onKeyPress: buildEnterKeyEvent(onClick),
    onClick: onClick,
    tabIndex: 0
  }), React.createElement(Text, {
    _hover: _extends({
      textDecoration: 'underline',
      cursor: 'pointer'
    }, _hover),
    fontSize: fontSize,
    textStyle: textStyle
  }, children));
};

var Image = function Image(_ref) {
  var props = _objectWithoutPropertiesLoose(_ref, ["loading"]);

  return React.createElement(Box, Object.assign({
    as: "img",
    style: {
      maxWidth: '100%',
      display: 'block'
    }
  }, props));
};

var AppIcon = function AppIcon(_ref) {
  var src = _ref.src,
      alt = _ref.alt,
      rest = _objectWithoutPropertiesLoose(_ref, ["src", "alt"]);

  return React.createElement(Box, Object.assign({
    borderRadius: "6px",
    overflow: "hidden",
    size: "loose"
  }, rest), React.createElement(Image, {
    src: src,
    alt: alt,
    title: alt,
    loading: "lazy",
    width: "100%",
    maxHeight: "100%"
  }));
};

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  margin-left: 4px;\n  margin-right: 4px;\n  display: inline;\n  position: relative;\n  top: -1px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var EncryptionIcon = function EncryptionIcon(props) {
  return React.createElement("svg", Object.assign({
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none"
  }, props), React.createElement("path", {
    d: "M18.5818 8.57143H17.7091V6C17.7091 4.4087 17.0655 2.88258 15.9198 1.75736C14.7741 0.632141 13.2202 0 11.6 0C9.97977 0 8.4259 0.632141 7.28022 1.75736C6.13454 2.88258 5.49091 4.4087 5.49091 6V8.57143H4.61818C3.92403 8.57218 3.25853 8.84334 2.76769 9.32541C2.27685 9.80748 2.00076 10.4611 2 11.1429V21.4286C2.00076 22.1103 2.27685 22.7639 2.76769 23.246C3.25853 23.7281 3.92403 23.9993 4.61818 24H18.5818C19.276 23.9993 19.9415 23.7281 20.4323 23.246C20.9231 22.7639 21.1992 22.1103 21.2 21.4286V11.1429C21.1992 10.4611 20.9231 9.80748 20.4323 9.32541C19.9415 8.84334 19.276 8.57218 18.5818 8.57143ZM7.23636 6C7.23636 4.86336 7.6961 3.77327 8.51444 2.96954C9.33278 2.16582 10.4427 1.71429 11.6 1.71429C12.7573 1.71429 13.8672 2.16582 14.6856 2.96954C15.5039 3.77327 15.9636 4.86336 15.9636 6V8.57143H7.23636V6Z",
    fill: "currentColor"
  }));
};

var MiniSVG = /*#__PURE__*/Styled.svg( /*#__PURE__*/_templateObject());

var BlockstackMini = function BlockstackMini(props) {
  return React.createElement(MiniSVG, Object.assign({
    width: "12",
    height: "12",
    viewBox: "0 0 12 12",
    fill: "none"
  }, props), React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.148042 1.08513C-5.58794e-08 1.42724 -3.80998e-08 1.86349 0 2.736L1.42713e-07 6L2.85387e-07 9.264C3.23525e-07 10.1365 0 10.5728 0.148042 10.9149C0.329866 11.335 0.664964 11.6701 1.08513 11.852C1.42724 12 1.86349 12 2.736 12H6H9.264C10.1365 12 10.5728 12 10.9149 11.852C11.335 11.6701 11.6701 11.335 11.852 10.9149C12 10.5728 12 10.1365 12 9.264V6V2.736C12 1.86349 12 1.42724 11.852 1.08513C11.6701 0.664963 11.335 0.329865 10.9149 0.148041C10.5728 -6.70552e-08 10.1365 -3.80998e-08 9.264 0L6 1.42713e-07L2.736 2.85387e-07C1.86349 3.23525e-07 1.40625 2.90573e-07 1.08513 0.148042C0.664964 0.329867 0.329866 0.664963 0.148042 1.08513ZM7.91566 5.16965C7.31682 5.16965 6.83125 4.68409 6.83125 4.08511C6.83125 3.48644 7.31682 3.00088 7.91566 3.00088C8.5145 3.00088 9.00007 3.48644 9.00007 4.08511C9.00007 4.68409 8.5145 5.16965 7.91566 5.16965ZM5.16787 4.085C5.16787 4.68358 4.68253 5.16893 4.08382 5.16893C3.48541 5.16893 3.00007 4.68358 3.00007 4.085C3.00007 3.48643 3.48541 3.00107 4.08382 3.00107C4.68253 3.00107 5.16787 3.48643 5.16787 4.085ZM7.91576 6.83459C7.31679 6.83459 6.83123 7.32016 6.83123 7.919C6.83123 8.51785 7.31679 9.00342 7.91576 9.00342C8.51444 9.00342 9 8.51785 9 7.919C9 7.32016 8.51444 6.83459 7.91576 6.83459ZM4.08392 6.83565C4.68248 6.83565 5.16783 7.32098 5.16783 7.91969C5.16783 8.51809 4.68248 9.00342 4.08392 9.00342C3.48535 9.00342 3 8.51809 3 7.91969C3 7.32098 3.48535 6.83565 4.08392 6.83565Z",
    fill: "#A1A7B3"
  }));
};

var EyeIcon = function EyeIcon(props) {
  return React.createElement("svg", Object.assign({
    width: "24",
    height: "20",
    viewBox: "0 0 24 20",
    fill: "none"
  }, props), React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19.695 0.351482C19.9032 0.135371 20.1868 0.00948757 20.4855 0.000511017C20.7171 -0.00642408 20.9454 0.057366 21.1405 0.183512C21.3356 0.309658 21.4883 0.492283 21.5786 0.707441C21.669 0.922599 21.6927 1.16026 21.6468 1.38926C21.6008 1.61827 21.4873 1.82793 21.3212 1.99078L4.3048 19.1469C4.19867 19.2575 4.07178 19.3456 3.93152 19.4062C3.79125 19.4668 3.64043 19.4987 3.48783 19.5C3.33523 19.5012 3.1839 19.4718 3.04268 19.4135C2.90146 19.3552 2.77316 19.2691 2.66526 19.1603C2.55735 19.0515 2.47201 18.9222 2.4142 18.7798C2.35639 18.6374 2.32727 18.4849 2.32854 18.331C2.3298 18.1771 2.36143 18.0251 2.42157 17.8837C2.48171 17.7423 2.56917 17.6143 2.67885 17.5074L19.695 0.351482ZM0.193655 8.95376C2.47935 4.5123 7.03523 1.71636 11.9982 1.71636C13.5143 1.71601 14.9919 1.97725 16.3789 2.46512L14.7583 4.09901C13.9263 3.68538 12.9904 3.45188 12 3.45188C8.55044 3.45188 5.754 6.27118 5.75403 9.74917C5.75404 10.7476 5.98562 11.6913 6.39588 12.5301L3.92169 15.0246C2.39514 13.8491 1.11258 12.3359 0.194802 10.5571C-0.0645738 10.0547 -0.0649106 9.45653 0.193655 8.95376ZM17.6041 6.96802L20.0781 4.47375C21.6047 5.64932 22.8874 7.16248 23.8052 8.94153C24.0646 9.44387 24.0649 10.042 23.8064 10.5448C21.5205 14.9863 16.9647 17.7818 12.0018 17.7818C10.4857 17.7821 9.00815 17.5209 7.62116 17.033L9.2415 15.3994C10.0735 15.813 11.0096 16.0465 12 16.0465C15.4496 16.0465 18.246 13.227 18.246 9.74917C18.246 8.75058 18.0145 7.80688 17.6041 6.96802ZM9.24284 6.96914C10.0042 6.20163 11.0022 5.81824 12 5.81824C12.3155 5.81824 12.6308 5.85684 12.9387 5.93349L8.2154 10.6956C7.89855 9.40286 8.24082 7.97945 9.24284 6.96914ZM11.0613 13.5647L15.7846 8.80249C16.1013 10.0952 15.7589 11.5184 14.7569 12.5285C13.755 13.5388 12.3434 13.8839 11.0613 13.5647Z",
    fill: "#5548FF"
  }), React.createElement("path", {
    d: "M19.6951 0.351482C19.9034 0.135371 20.1869 0.00948757 20.4856 0.000511017C20.7173 -0.00642408 20.9456 0.057366 21.1406 0.183512C21.3357 0.309658 21.4884 0.492283 21.5787 0.707441C21.6691 0.922599 21.6928 1.16026 21.6469 1.38926C21.6009 1.61827 21.4874 1.82793 21.3213 1.99078L4.30491 19.1469C4.19879 19.2575 4.07189 19.3456 3.93163 19.4062C3.79137 19.4668 3.64054 19.4987 3.48794 19.5C3.33534 19.5012 3.18402 19.4718 3.0428 19.4135C2.90157 19.3552 2.77327 19.2691 2.66537 19.1603C2.55747 19.0515 2.47213 18.9222 2.41432 18.7798C2.35651 18.6374 2.32739 18.4849 2.32865 18.331C2.32992 18.1771 2.36154 18.0251 2.42169 17.8837C2.48183 17.7423 2.56929 17.6143 2.67896 17.5074L19.6951 0.351482Z",
    fill: "#5548FF"
  }));
};

var TransactionTypes;

(function (TransactionTypes) {
  TransactionTypes["ContractCall"] = "contract_call";
  TransactionTypes["ContractDeploy"] = "smart_contract";
  TransactionTypes["STXTransfer"] = "token_transfer";
})(TransactionTypes || (TransactionTypes = {}));
/**
 * Contract Call
 */


var ContractCallArgumentType;

(function (ContractCallArgumentType) {
  ContractCallArgumentType["BUFFER"] = "buffer";
  ContractCallArgumentType["UINT"] = "uint";
  ContractCallArgumentType["INT"] = "int";
  ContractCallArgumentType["PRINCIPAL"] = "principal";
  ContractCallArgumentType["BOOL"] = "bool";
})(ContractCallArgumentType || (ContractCallArgumentType = {}));

var generateTokenAndOpenPopup = function generateTokenAndOpenPopup(opts, makeTokenFn) {
  try {
    return Promise.resolve(makeTokenFn(opts)).then(function (token) {
      return openTransactionPopup({
        token: token,
        opts: opts
      });
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var getKeys = function getKeys(_userSession) {
  var userSession = _userSession;

  if (!userSession) {
    var appConfig = new AppConfig(['store_write'], document.location.href);
    userSession = new UserSession({
      appConfig: appConfig
    });
  }

  var privateKey = userSession.loadUserData().appPrivateKey;
  var publicKey = SECP256K1Client.derivePublicKey(privateKey);
  return {
    privateKey: privateKey,
    publicKey: publicKey
  };
};

var signPayload = function signPayload(payload, privateKey) {
  try {
    var tokenSigner = new TokenSigner('ES256k', privateKey);
    return Promise.resolve(tokenSigner.signAsync(payload));
  } catch (e) {
    return Promise.reject(e);
  }
};

var openTransactionPopup = function openTransactionPopup(_ref) {
  var token = _ref.token,
      opts = _ref.opts;

  try {
    var _window$BlockstackPro;

    return Promise.resolve((_window$BlockstackPro = window.BlockstackProvider) === null || _window$BlockstackPro === void 0 ? void 0 : _window$BlockstackPro.getURL()).then(function (extensionURL) {
      var authURL = new URL(extensionURL || opts.authOrigin || defaultAuthURL);
      var urlParams = new URLSearchParams();
      urlParams.set('request', token);
      var popup = popupCenter({
        url: authURL.origin + "/#/transaction?" + urlParams.toString(),
        h: 700
      });
      setupListener({
        popup: popup,
        authURL: authURL,
        onFinish: function onFinish(data) {
          if (opts.finished) {
            opts.finished(data);
          }
        },
        messageParams: {}
      });
      return popup;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var makeContractCallToken = function makeContractCallToken(opts) {
  try {
    var functionArgs = opts.functionArgs,
        appDetails = opts.appDetails;

    var _getKeys = getKeys(opts.userSession),
        privateKey = _getKeys.privateKey,
        publicKey = _getKeys.publicKey;

    var args = functionArgs.map(function (arg) {
      if (typeof arg === 'string') {
        return arg;
      }

      return serializeCV(arg).toString('hex');
    });

    var payload = _extends({}, opts, {
      functionArgs: args,
      txType: TransactionTypes.ContractCall,
      publicKey: publicKey
    });

    if (appDetails) {
      payload.appDetails = appDetails;
    }

    return signPayload(payload, privateKey);
  } catch (e) {
    return Promise.reject(e);
  }
};
var makeContractDeployToken = function makeContractDeployToken(opts) {
  try {
    var appDetails = opts.appDetails;

    var _getKeys2 = getKeys(opts.userSession),
        privateKey = _getKeys2.privateKey,
        publicKey = _getKeys2.publicKey;

    var payload = _extends({}, opts, {
      publicKey: publicKey,
      txType: TransactionTypes.ContractDeploy
    });

    if (appDetails) {
      payload.appDetails = appDetails;
    }

    return signPayload(payload, privateKey);
  } catch (e) {
    return Promise.reject(e);
  }
};
var makeSTXTransferToken = function makeSTXTransferToken(opts) {
  try {
    var amount = opts.amount,
        appDetails = opts.appDetails;

    var _getKeys3 = getKeys(opts.userSession),
        privateKey = _getKeys3.privateKey,
        publicKey = _getKeys3.publicKey;

    var payload = _extends({}, opts, {
      amount: amount.toString(10),
      publicKey: publicKey,
      txType: TransactionTypes.STXTransfer
    });

    if (appDetails) {
      payload.appDetails = appDetails;
    }

    return signPayload(payload, privateKey);
  } catch (e) {
    return Promise.reject(e);
  }
};
var openContractCall = function openContractCall(opts) {
  return generateTokenAndOpenPopup(opts, makeContractCallToken);
};
var openContractDeploy = function openContractDeploy(opts) {
  return generateTokenAndOpenPopup(opts, makeContractDeployToken);
};
var openSTXTransfer = function openSTXTransfer(opts) {
  return generateTokenAndOpenPopup(opts, makeSTXTransferToken);
};

var useConnectDispatch = function useConnectDispatch() {
  var dispatch = useContext(ConnectDispatchContext);

  if (!dispatch) {
    throw new Error('This must be used within the ConnectProvider component.');
  }

  return dispatch;
};

var useConnect = function useConnect() {
  var _useContext = useContext(ConnectContext),
      isOpen = _useContext.isOpen,
      isAuthenticating = _useContext.isAuthenticating,
      authData = _useContext.authData,
      screen = _useContext.screen,
      authOptions = _useContext.authOptions,
      userSession = _useContext.userSession;

  var dispatch = useConnectDispatch();

  var doUpdateAuthOptions = function doUpdateAuthOptions(payload) {
    return dispatch({
      type: States.UPDATE_AUTH_OPTIONS,
      payload: payload
    });
  };

  var doChangeScreen = function doChangeScreen(newScreen) {
    return dispatch({
      type: newScreen
    });
  };

  var doGoToIntroScreen = function doGoToIntroScreen() {
    return doChangeScreen(States.SCREENS_INTRO);
  };

  var doGoToHowItWorksScreen = function doGoToHowItWorksScreen() {
    return doChangeScreen(States.SCREENS_HOW_IT_WORKS);
  };

  var doGoToSignInScreen = function doGoToSignInScreen() {
    return doChangeScreen(States.SCREENS_SIGN_IN);
  };

  var doStartAuth = function doStartAuth() {
    return dispatch({
      type: States.START_AUTH
    });
  };

  var doFinishAuth = function doFinishAuth(payload) {
    dispatch({
      type: States.FINISH_AUTH,
      payload: payload
    });
    doCloseAuth();
  };

  var doCancelAuth = function doCancelAuth() {
    return dispatch({
      type: States.CANCEL_AUTH
    });
  };

  var doOpenAuth = function doOpenAuth(signIn, opts) {
    if (signIn) {
      var options = _extends({}, authOptions, opts, {
        finished: function finished(payload) {
          doFinishAuth(payload);
          authOptions.finished && authOptions.finished(payload);
        },
        sendToSignIn: true
      });

      doStartAuth();
      void authenticate(options);
      return;
    }

    authOptions && doUpdateAuthOptions(authOptions);
    dispatch({
      type: States.MODAL_OPEN
    });
  };

  var doCloseAuth = function doCloseAuth() {
    dispatch({
      type: States.MODAL_CLOSE
    });
    setTimeout(doGoToIntroScreen, 250);
  };

  var doAuth = function doAuth(options) {
    if (options === void 0) {
      options = {};
    }

    doStartAuth();
    void authenticate(_extends({}, authOptions, options, {
      finished: function finished(payload) {
        authOptions.finished && authOptions.finished(payload);
        doFinishAuth(payload);
      }
    }));
  };

  var doContractCall = function doContractCall(opts) {
    try {
      return Promise.resolve(openContractCall(_extends({}, opts, {
        authOrigin: authOptions.authOrigin,
        appDetails: authOptions.appDetails
      })));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var doContractDeploy = function doContractDeploy(opts) {
    try {
      return Promise.resolve(openContractDeploy(_extends({}, opts, {
        authOrigin: authOptions.authOrigin,
        appDetails: authOptions.appDetails
      })));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var doSTXTransfer = function doSTXTransfer(opts) {
    try {
      return Promise.resolve(openSTXTransfer(_extends({}, opts, {
        authOrigin: authOptions.authOrigin,
        appDetails: authOptions.appDetails
      })));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return {
    isOpen: isOpen,
    isAuthenticating: isAuthenticating,
    authData: authData,
    authOptions: authOptions,
    screen: screen,
    userSession: userSession,
    doOpenAuth: doOpenAuth,
    doCloseAuth: doCloseAuth,
    doChangeScreen: doChangeScreen,
    doGoToIntroScreen: doGoToIntroScreen,
    doGoToHowItWorksScreen: doGoToHowItWorksScreen,
    doGoToSignInScreen: doGoToSignInScreen,
    doCancelAuth: doCancelAuth,
    doStartAuth: doStartAuth,
    doFinishAuth: doFinishAuth,
    doAuth: doAuth,
    authenticate: authenticate,
    doContractCall: doContractCall,
    doContractDeploy: doContractDeploy,
    doSTXTransfer: doSTXTransfer
  };
};

var useAppDetails = function useAppDetails() {
  var _useContext = useContext(ConnectContext),
      authOptions = _useContext.authOptions;

  if (!authOptions.appDetails) {
    throw new Error('This must be used within the ConnectProvider component.');
  }

  return authOptions.appDetails;
};

var Title = function Title(props) {
  return React.createElement(Text, Object.assign({
    width: "100%",
    fontWeight: "medium",
    fontSize: "24px",
    lineHeight: "32px",
    display: "inline-block"
  }, props));
};

var Pretitle = function Pretitle(props) {
  return React.createElement(Text, Object.assign({
    pt: "loose",
    width: "100%",
    fontWeight: "medium",
    fontSize: ['11px'],
    lineHeight: ['20px'],
    color: "ink.600",
    style: {
      textTransform: 'uppercase'
    }
  }, props));
};

var Body = function Body(props) {
  return React.createElement(Text, Object.assign({
    fontSize: "14px",
    lineHeight: "20px"
  }, props));
};

var ScreenLoader = function ScreenLoader(_ref) {
  var isLoading = _ref.isLoading;
  return React.createElement(Flex, {
    align: "center",
    justify: "center",
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    bg: "rgba(255,255,255," + (isLoading ? 0.6 : 0) + ")",
    borderBottomLeftRadius: "6px",
    borderBottomRightRadius: "6px",
    zIndex: 99,
    transition: "250ms all",
    style: {
      pointerEvents: isLoading ? 'unset' : 'none'
    },
    opacity: isLoading ? 1 : 0
  }, React.createElement(Box, {
    transition: "500ms all",
    transform: isLoading ? 'none' : 'translateY(10px)'
  }, React.createElement(Spinner, {
    size: "xl",
    thickness: "3px",
    color: "blue"
  })));
};

var Screen = function Screen(_ref) {
  var noMinHeight = _ref.noMinHeight,
      isLoading = _ref.isLoading,
      children = _ref.children,
      onSubmit = _ref.onSubmit,
      rest = _objectWithoutPropertiesLoose(_ref, ["noMinHeight", "isLoading", "children", "onSubmit"]);

  var handleSubmit = onSubmit ? function (e) {
    e.preventDefault();
    onSubmit();
  } : undefined;
  return React.createElement(React.Fragment, null, React.createElement(ScreenLoader, {
    isLoading: isLoading
  }), React.createElement(Flex, Object.assign({
    width: "100%",
    flexDirection: "column",
    minHeight: noMinHeight ? undefined : ['100vh', 'unset'],
    flex: 1,
    style: {
      pointerEvents: isLoading ? 'none' : 'unset'
    },
    as: onSubmit ? 'form' : 'main',
    onSubmit: handleSubmit,
    "data-test": "screen"
  }, rest), children));
};

var PX = 6;

var ScreenActions = function ScreenActions(props) {
  return React.createElement(Flex, Object.assign({
    px: PX
  }, props));
};

var ScreenBody = function ScreenBody(_ref) {
  var body = _ref.body,
      pretitle = _ref.pretitle,
      fullWidth = _ref.fullWidth,
      rest = _objectWithoutPropertiesLoose(_ref, ["body", "pretitle", "fullWidth"]);

  return React.createElement(Flex, Object.assign({
    mx: fullWidth ? 0 : PX,
    flexDirection: "column"
  }, rest), pretitle && React.createElement(Pretitle, null, pretitle), body && body.length ? body.map(function (child, key) {
    return child && React.isValidElement(child) && child.type === Title ? React.createElement(React.Fragment, {
      key: key
    }, child) : React.createElement(Body, {
      key: key
    }, child);
  }) : body);
};

var ScreenFooter = function ScreenFooter(_ref) {
  var children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["children"]);

  return React.createElement(Flex, Object.assign({
    mx: PX,
    flex: 1,
    fontSize: ['12px', '14px'],
    color: "ink.600",
    fontWeight: "medium",
    justify: "space-between"
  }, rest), children);
};

var ScreenHeader = function ScreenHeader(_ref) {
  var appDetails = _ref.appDetails,
      _ref$hideLogo = _ref.hideLogo,
      hideLogo = _ref$hideLogo === void 0 ? false : _ref$hideLogo,
      rightContent = _ref.rightContent,
      rest = _objectWithoutPropertiesLoose(_ref, ["appDetails", "hideLogo", "rightContent", "title"]);

  var _useAppDetails = useAppDetails(),
      name = _useAppDetails.name,
      icon = _useAppDetails.icon;

  var appName = name;
  var appIcon = icon;

  if (appDetails) {
    appName = appDetails.name;
    appIcon = appDetails.icon;
  }

  return React.createElement(Flex, Object.assign({
    py: [4, 5],
    px: "base",
    height: "56px",
    borderBottom: "1px solid",
    borderBottomColor: "inherit",
    borderRadius: ['unset', '6px 6px 0 0'],
    bg: "white",
    align: "center",
    justify: "space-between"
  }, rest), React.createElement(Flex, {
    width: "100%",
    align: "center",
    justifyContent: "space-between"
  }, React.createElement(Flex, {
    align: "center"
  }, hideLogo ? null : React.createElement(AppIcon, {
    src: appIcon,
    alt: appName || 'loading',
    mr: "tight"
  }), React.createElement(Text, {
    fontWeight: 500,
    textStyle: 'body.small.medium',
    fontSize: '12px'
  }, appName)), rightContent ? rightContent : null));
};

var onClick = function onClick() {
  typeof window !== 'undefined' && window.open('https://blockstack.org', '_blank');
};

var PoweredBy = function PoweredBy() {
  return React.createElement(Flex, {
    fontSize: ['12px', '14px'],
    justifyContent: "center",
    color: "ink.600",
    textAlign: "center",
    width: "100%",
    my: "loose"
  }, React.createElement(PseudoBox, {
    textAlign: "center",
    onClick: onClick,
    onKeyPress: buildEnterKeyEvent(onClick),
    textStyle: "caption",
    display: "flex",
    alignSelf: "flex-end",
    tabIndex: 0,
    _hover: {
      cursor: 'pointer'
    }
  }, "Powered by", React.createElement(Box, {
    ml: "2px"
  }, React.createElement(BlockstackMini, null)), "Blockstack"));
};

var UnionLine = function UnionLine() {
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "7",
    fill: "none",
    viewBox: "0 0 32 7"
  }, React.createElement("mask", {
    id: "a",
    width: "32",
    height: "7",
    x: "0",
    y: "0",
    fill: "#000",
    maskUnits: "userSpaceOnUse"
  }, React.createElement("path", {
    fill: "#fff",
    d: "M0 0H32V7H0z"
  }), React.createElement("path", {
    fillRule: "evenodd",
    d: "M3.5 5a1.5 1.5 0 001.415-1h22.17a1.5 1.5 0 100-1H4.915A1.5 1.5 0 103.5 5z",
    clipRule: "evenodd"
  })), React.createElement("path", {
    fill: "#677282",
    fillRule: "evenodd",
    d: "M3.5 5a1.5 1.5 0 001.415-1h22.17a1.5 1.5 0 100-1H4.915A1.5 1.5 0 103.5 5z",
    clipRule: "evenodd"
  }), React.createElement("path", {
    fill: "#fff",
    d: "M4.915 4V2H3.5L3.03 3.334 4.915 4zm22.17 0l1.886-.667L28.5 2h-1.415v2zm0-1v2H28.5l.471-1.333L27.085 3zM4.915 3l-1.886.666L3.5 5h1.415V3zm-1.886.334A.5.5 0 013.5 3v4a3.5 3.5 0 003.3-2.334L3.03 3.334zM27.085 2H4.915v4h22.17V2zM28.5 3a.5.5 0 01.471.333L25.2 4.667A3.5 3.5 0 0028.5 7V3zm-.5.5a.5.5 0 01.5-.5v4A3.5 3.5 0 0032 3.5h-4zm.5.5a.5.5 0 01-.5-.5h4A3.5 3.5 0 0028.5 0v4zm.471-.333A.5.5 0 0128.5 4V0a3.5 3.5 0 00-3.3 2.333l3.771 1.333zM4.915 5h22.17V1H4.915v4zM3.5 4a.5.5 0 01-.471-.334L6.8 2.334A3.5 3.5 0 003.5 0v4zm.5-.5a.5.5 0 01-.5.5V0A3.5 3.5 0 000 3.5h4zM3.5 3a.5.5 0 01.5.5H0A3.5 3.5 0 003.5 7V3z",
    mask: "url(#a)"
  }));
};

var PadlockIcon = function PadlockIcon() {
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "64",
    height: "64",
    fill: "none",
    viewBox: "0 0 64 64"
  }, React.createElement("path", {
    d: "M0 25.6C0 16.6392 0 12.1587 1.7439 8.73615C3.27787 5.72556 5.72556 3.27787 8.73615 1.7439C12.1587 0 16.6392 0 25.6 0L38.4 0C47.3608 0 51.8413 0 55.2638 1.7439C58.2744 3.27787 60.7221 5.72556 62.2561 8.73615C64 12.1587 64 16.6392 64 25.6V38.4C64 47.3608 64 51.8413 62.2561 55.2638C60.7221 58.2744 58.2744 60.7221 55.2638 62.2561C51.8413 64 47.3608 64 38.4 64H25.6C16.6392 64 12.1587 64 8.73615 62.2561C5.72556 60.7221 3.27787 58.2744 1.7439 55.2638C0 51.8413 0 47.3608 0 38.4L0 25.6Z",
    fill: "#E3E5FF"
  }), React.createElement("path", {
    d: "M40.7273 26.7143H39.6364V23.5C39.6364 21.5109 38.8318 19.6032 37.3997 18.1967C35.9676 16.7902 34.0253 16 32 16C29.9747 16 28.0324 16.7902 26.6003 18.1967C25.1682 19.6032 24.3636 21.5109 24.3636 23.5V26.7143H23.2727C22.405 26.7152 21.5732 27.0542 20.9596 27.6568C20.3461 28.2594 20.001 29.0764 20 29.9286V42.7857C20.001 43.6379 20.3461 44.4549 20.9596 45.0575C21.5732 45.6601 22.405 45.9991 23.2727 46H40.7273C41.595 45.9991 42.4268 45.6601 43.0404 45.0575C43.6539 44.4549 43.999 43.6379 44 42.7857V29.9286C43.999 29.0764 43.6539 28.2594 43.0404 27.6568C42.4268 27.0542 41.595 26.7152 40.7273 26.7143ZM26.5455 23.5C26.5455 22.0792 27.1201 20.7166 28.1431 19.7119C29.166 18.7073 30.5534 18.1429 32 18.1429C33.4466 18.1429 34.834 18.7073 35.8569 19.7119C36.8799 20.7166 37.4545 22.0792 37.4545 23.5V26.7143H26.5455V23.5Z",
    fill: "#3700FF"
  }));
};

var AppElement = function AppElement(_ref) {
  var name = _ref.name,
      icon = _ref.icon,
      rest = _objectWithoutPropertiesLoose(_ref, ["name", "icon"]);

  return React.createElement(Flex, Object.assign({
    mx: "auto",
    position: "relative"
  }, rest), React.createElement(AppIcon, {
    size: "64px",
    mr: "loose",
    src: icon,
    alt: name,
    borderRadius: "0"
  }), React.createElement(Box, {
    position: "absolute",
    left: "50%",
    top: "50%",
    ml: "-16px",
    mt: "-6px"
  }, React.createElement(UnionLine, null)), React.createElement(PadlockIcon, null));
};

var Intro = function Intro() {
  var _useConnect = useConnect(),
      doGoToHowItWorksScreen = _useConnect.doGoToHowItWorksScreen,
      doAuth = _useConnect.doAuth;

  var _useAppDetails = useAppDetails(),
      name = _useAppDetails.name,
      icon = _useAppDetails.icon;

  return React.createElement(Screen, {
    noMinHeight: true,
    textAlign: "center"
  }, React.createElement(AppElement, {
    mt: "loose",
    name: name,
    icon: icon
  }), React.createElement(ScreenBody, {
    fullWidth: true,
    mt: "base",
    body: [React.createElement(Title, {
      fontSize: "20px",
      lineHeight: "28px",
      px: "extra-loose"
    }, name + " guarantees your privacy by encrypting everything"), React.createElement(Box, {
      mt: "base",
      mx: "auto",
      width: "100%",
      height: "1px",
      bg: "#E5E5EC"
    }), React.createElement(Box, null, React.createElement(CheckList, {
      items: [{
        icon: EncryptionIcon,
        text: "You'll get a Secret Key that automatically encrypts everything you do"
      }, {
        icon: EyeIcon,
        text: name + " won't be able to see, access, or track your activity"
      }]
    }))]
  }), React.createElement(ScreenActions, null, React.createElement(Button, {
    width: "100%",
    size: "lg",
    mt: "tight",
    onClick: function onClick() {
      return doAuth();
    }
  }, "Get your Secret Key")), React.createElement(ScreenFooter, null, React.createElement(Stack, {
    mb: "base-loose",
    mt: "base-tight",
    spacing: "base",
    isInline: true
  }, React.createElement(Link, {
    textStyle: "caption",
    color: "blue",
    onClick: function onClick() {
      return doAuth({
        sendToSignIn: true
      });
    }
  }, "Sign in"), React.createElement(Link, {
    color: "blue",
    textStyle: "caption",
    onClick: function onClick() {
      doGoToHowItWorksScreen();
    }
  }, "How it works"), React.createElement(Link, {
    color: "blue",
    textStyle: "caption",
    onClick: function onClick() {
      window.open('https://www2.blockstack.org/install-extension', '_blank');
    }
  }, "Install extension"))));
};

var howSecretKeyWorks = function howSecretKeyWorks(_ref) {
  var name = _ref.name;
  return [{
    title: 'What is Blockstack?',
    body: React.createElement("span", null, "Blockstack is the open-source technology that generates your Secret Key. There's no company that owns or controls Blockstack, it is independent. Go to", ' ', React.createElement(Link, {
      color: "blue",
      display: "inline-block",
      onClick: function onClick() {
        return window.open('https://blockstack.org', '_blank');
      },
      fontSize: "14px"
    }, "blockstack.org"), ' ', "to learn more.")
  }, {
    title: 'Encryption',
    body: "Encryption is always on. It locks everything you do in " + name + " into useless codes. Because of this, " + name + " can\u2019t see or track your activity. Your data can only be unlocked with the key that you own. No one else has this key, not even " + name + ", so no one else can unlock your data"
  }, {
    title: 'What is a Secret Key?',
    body: "Your Secret Key unlocks your data. It's created independently from " + name + " to make sure that " + name + " doesn't have it. An open-source protocol called Blockstack generates your Secret Key when you sign up. Nobody but you will have your Secret Key, to make sure that only you have access to your data."
  }, {
    title: 'When will I need my Secret Key?',
    body: "You\u2019ll need your Secret Key to prove it\u2019s you when you use " + name + " on a new device, such as a new phone or laptop. After that, your Secret Key will stay active to keep you safe and private in the apps you use on that device."
  }];
};

var HowItWorks = function HowItWorks() {
  var _useAppDetails = useAppDetails(),
      name = _useAppDetails.name;

  var _useConnect = useConnect(),
      doAuth = _useConnect.doAuth;

  return React.createElement(Screen, null, React.createElement(ScreenBody, {
    pretitle: "How it works",
    body: [React.createElement(Title, null, name, " keeps everything you do private with Blockstack's Secret Key technology"), React.createElement(Text, {
      mt: "tight",
      display: "block"
    }, "Normally, apps keep your data for them to use. When you have a Secret Key, you no longer have to trust ", name, " with your data because ", name, " won't have access."), React.createElement(Box, {
      mt: "tight"
    }, howSecretKeyWorks({
      name: name
    }).map(function (_ref2, key) {
      var title = _ref2.title,
          body = _ref2.body;
      return React.createElement(Box, {
        mt: "extra-loose",
        key: key
      }, React.createElement(Text, {
        mt: "base-tight",
        display: "block",
        fontWeight: "semibold"
      }, title), React.createElement(Text, {
        mt: "tight",
        display: "block"
      }, body));
    }))]
  }), React.createElement(ScreenActions, null, React.createElement(Button, {
    width: "100%",
    size: "lg",
    mt: "loose",
    onClick: function onClick() {
      return doAuth();
    }
  }, "Get Started")), React.createElement(ScreenFooter, null, React.createElement(PoweredBy, null)));
};

var ContinueWithAuth = function ContinueWithAuth(props) {
  var _useConnect = useConnect(),
      authenticate = _useConnect.authenticate,
      authOptions = _useConnect.authOptions;

  var _useHover = useHover(),
      hovered = _useHover[0],
      bind = _useHover[1];

  return React.createElement(Flex, Object.assign({
    textAlign: "center",
    width: "100%",
    align: "center",
    justifyContent: "center",
    border: "1px solid",
    borderColor: "inherit",
    px: "loose",
    py: "base-tight",
    borderRadius: "6px",
    boxShadow: "mid",
    height: 14,
    transition: "250ms all",
    cursor: hovered ? 'pointer' : 'unset',
    bg: hovered ? 'rgba(0,0,0,0.02)' : 'white',
    transform: hovered ? 'translateY(-2px)' : 'none',
    onClick: function onClick() {
      void authenticate(_extends({}, authOptions, {
        sendToSignIn: true
      }));
    }
  }, bind, props), React.createElement(Logo, {
    mr: "tight"
  }), React.createElement(Text, {
    fontWeight: 500
  }, "Continue with Secret Key"));
};

// https://github.com/moldy530/react-use-scroll-lock/blob/master/src/use-scroll-lock.ts
var instances = /*#__PURE__*/new Set();

if (typeof window !== 'undefined') {
  // this is necessary because we may share instances of this file on a page so we store these globally
  window.__useScrollLockInstances = window.__useScrollLockInstances || /*#__PURE__*/new Set();
  instances = window.__useScrollLockInstances;
}

var originalStyle = function originalStyle() {
  window.__useScrollLockStyle = window.__useScrollLockStyle || window.getComputedStyle(document.body).overflow;
  return window.__useScrollLockStyle;
};

var registerInstance = function registerInstance(instance) {
  if (instances.size === 0) {
    setBodyOverflow(true);
  }

  instances.add(instance);
};

var unregisterInstance = function unregisterInstance(instance) {
  instances["delete"](instance);

  if (instances.size === 0) {
    setBodyOverflow(false);
  }
};

var setBodyOverflow = function setBodyOverflow(shouldLock) {
  if (shouldLock) {
    originalStyle();
    document.body.style.overflow = 'hidden';
  } else {
    document.body.style.overflow = originalStyle();
  }
};

var useScrollLock = function useScrollLock(shouldLock) {
  // we generate a unique reference to the component that uses this thing
  var _useState = useState({}),
      elementId = _useState[0];

  useEffect(function () {
    if (shouldLock) {
      registerInstance(elementId);
    } // Re-enable scrolling when component unmounts


    return function () {
      return unregisterInstance(elementId);
    };
  }, [elementId, shouldLock]); // ensures effect is only run on mount, unmount, and on shouldLock change
};

var CloseIcon = function CloseIcon(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 16 : _ref$size;
  return React.createElement("svg", {
    width: size,
    height: size,
    viewBox: "0 0 16 16"
  }, React.createElement("path", {
    fill: "#C1C3CC",
    fillRule: "evenodd",
    d: "M4.817 3.403a1 1 0 00-1.414 1.414L6.586 8l-3.183 3.183a1 1 0 001.414 1.415L8 9.415l3.183 3.183a1 1 0 101.415-1.415L9.415 8l3.183-3.183a1.002 1.002 0 00-.325-1.631 1 1 0 00-1.09.217L8 6.586 4.817 3.403z",
    clipRule: "evenodd"
  }));
};

var HeaderTitle = function HeaderTitle(_ref2) {
  var _ref2$hideIcon = _ref2.hideIcon,
      hideIcon = _ref2$hideIcon === void 0 ? false : _ref2$hideIcon,
      title = _ref2.title;
  return React.createElement(Flex, {
    align: "center"
  }, hideIcon ? null : React.createElement(Logo, {
    mr: "tight"
  }), React.createElement(Text, {
    fontWeight: 500,
    fontSize: '12px'
  }, title));
};

var ModalHeaderIconButton = function ModalHeaderIconButton(_ref3) {
  var size = _ref3.size,
      props = _objectWithoutPropertiesLoose(_ref3, ["size"]);

  var _useHover = useHover(),
      hover = _useHover[0],
      bind = _useHover[1];

  var Icon = props.icon;
  return React.createElement(Box, Object.assign({
    as: "button",
    border: "0",
    borderColor: "transparent",
    backgroundColor: "transparent",
    cursor: hover ? 'pointer' : 'unset'
  }, bind, props), React.createElement(Icon, {
    direction: "left",
    size: size
  }));
};

var ModalHeader = function ModalHeader(_ref4) {
  var title = _ref4.title,
      back = _ref4.back,
      hideIcon = _ref4.hideIcon,
      close = _ref4.close,
      hideTitleElements = _ref4.hideTitleElements,
      rest = _objectWithoutPropertiesLoose(_ref4, ["title", "back", "hideIcon", "close", "hideTitleElements"]);

  var _useConnect = useConnect(),
      doCloseAuth = _useConnect.doCloseAuth,
      doChangeScreen = _useConnect.doChangeScreen;

  return React.createElement(Flex, Object.assign({
    p: "base",
    borderRadius: ['unset', '6px 6px 0 0'],
    bg: "white",
    align: "center",
    justify: "space-between",
    position: "relative",
    borderBottom: back ? '1px solid' : 'unset',
    borderBottomColor: "inherit"
  }, rest), back ? React.createElement(ModalHeaderIconButton, {
    onClick: function onClick() {
      return doChangeScreen(back);
    },
    icon: ChevronIcon,
    size: 22
  }) : null, !hideTitleElements ? React.createElement(Flex, {
    align: "center",
    mx: back ? 'auto' : 'unset',
    transform: back ? 'translateX(-15px)' : 'unset'
  }, React.createElement(HeaderTitle, {
    hideIcon: hideIcon,
    title: title
  })) : React.createElement(Flex, null), close ? React.createElement(ModalHeaderIconButton, {
    size: 16,
    icon: CloseIcon,
    onClick: doCloseAuth
  }) : null);
};

var RenderScreen = function RenderScreen() {
  var _useConnect2 = useConnect(),
      screen = _useConnect2.screen;

  switch (screen) {
    case States.SCREENS_HOW_IT_WORKS:
      {
        return React.createElement(HowItWorks, null);
      }

    case States.SCREENS_SIGN_IN:
      {
        return React.createElement(Box, {
          width: "100%",
          p: "base-loose"
        }, React.createElement(ContinueWithAuth, null));
      }

    default:
      {
        return React.createElement(Intro, null);
      }
  }
};

var Modal = function Modal() {
  var _useConnect3 = useConnect(),
      isOpen = _useConnect3.isOpen,
      doCloseAuth = _useConnect3.doCloseAuth,
      screen = _useConnect3.screen;

  useScrollLock(isOpen);
  return React.createElement(ThemeProvider, {
    theme: theme
  }, React.createElement(ScopedCSSReset, null, React.createElement(Modal$1, {
    headerComponent: React.createElement(ModalHeader, {
      close: !(screen === States.SCREENS_HOW_IT_WORKS),
      hideTitleElements: true,
      back: screen === States.SCREENS_HOW_IT_WORKS ? States.SCREENS_INTRO : undefined,
      title: screen === States.SCREENS_SIGN_IN ? 'Sign In' : 'Secret Key'
    }),
    close: doCloseAuth,
    isOpen: isOpen
  }, React.createElement(RenderScreen, null))));
};

/**
 * Usage
 *
 *
 * const auth = {
      manifestPath: '/static/manifest.json',
      redirectTo: '/',
      finished: ({userSession}) => {
        doFinishSignIn();
      },
      authOrigin,
      appDetails: {
        name: 'Wink',
        icon: 'url'
      }
    }
 *
 * <Connect authOptions={authOptions} />
 */

var Connect = function Connect(_ref) {
  var authOptions = _ref.authOptions,
      children = _ref.children;
  return React.createElement(ConnectProvider, {
    authOptions: authOptions
  }, React.createElement(Modal, null), children);
};

var Base = function Base() {
  var _useConnect = useConnect(),
      doOpenAuth = _useConnect.doOpenAuth;

  useEffect(function () {
    // add a small delay before triggering the modal, to properly allow
    // animations to show
    var delay = 10;
    setTimeout(function () {
      doOpenAuth();
    }, delay);
  }, []);
  return React.createElement("div", null);
};

var showBlockstackConnect = function showBlockstackConnect(authOptions) {
  if (authOptions.sendToSignIn) {
    return authenticate(authOptions);
  }

  var baseDiv = document.createElement('div');
  document.body.appendChild(baseDiv);
  ReactDOM.render(React.createElement(Connect, {
    authOptions: authOptions
  }, React.createElement(Base, null)), baseDiv);
  return;
};

export { Connect, ContractCallArgumentType, Link, PoweredBy, Screen, ScreenActions, ScreenBody, ScreenFooter, ScreenHeader, ScreenLoader, Title, TransactionTypes, authenticate, buildEnterKeyEvent, defaultAuthURL, getOrCreateUserSession, getUserData, isMobile, makeContractCallToken, makeContractDeployToken, makeSTXTransferToken, openContractCall, openContractDeploy, openSTXTransfer, popupCenter, setupListener, shouldUsePopup, showBlockstackConnect, useConnect };
//# sourceMappingURL=connect.esm.js.map
