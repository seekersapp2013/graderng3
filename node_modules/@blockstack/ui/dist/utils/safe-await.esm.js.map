{"version":3,"file":"safe-await.esm.js","sources":["../../src/utils/safe-await.ts"],"sourcesContent":["// TypeScript port of https://github.com/DavidWells/safe-await/\n\n// Native Error types https://mzl.la/2Veh3TR\nconst nativeExceptions = [\n  EvalError,\n  RangeError,\n  ReferenceError,\n  SyntaxError,\n  TypeError,\n  URIError,\n].filter(except => typeof except === 'function');\n\nfunction throwNative(error: Error) {\n  for (const Exception of nativeExceptions) {\n    if (error instanceof Exception) throw error;\n  }\n}\n\nexport function safeAwait<T>(promise: Promise<T>, finallyFn?: () => void) {\n  return promise\n    .then(data => {\n      if (data instanceof Error) {\n        throwNative(data);\n        return [data] as readonly [Error];\n      }\n      return [undefined, data] as const;\n    })\n    .catch((error: Error) => {\n      throwNative(error);\n      return [error] as const;\n    })\n    .finally(() => {\n      if (finallyFn) finallyFn();\n    });\n}\n"],"names":["nativeExceptions","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError","filter","except","throwNative","error","Exception","safeAwait","promise","finallyFn","then","data","Error","undefined"],"mappings":";;AAGA,IAAMA,gBAAgB,gBAAG,CACvBC,SADuB,EAEvBC,UAFuB,EAGvBC,cAHuB,EAIvBC,WAJuB,EAKvBC,SALuB,EAMvBC,QANuB,EAOvBC,MAPuB,CAOhB,UAAAC,MAAM;AAAA,SAAI,OAAOA,MAAP,KAAkB,UAAtB;AAAA,CAPU,CAAzB;;AASA,SAASC,WAAT,CAAqBC,KAArB;AACE,uDAAwBV,gBAAxB,wCAA0C;AAAA,QAA/BW,SAA+B;AACxC,QAAID,KAAK,YAAYC,SAArB,EAAgC,MAAMD,KAAN;AACjC;AACF;;SAEeE,UAAaC,SAAqBC;AAChD,SAAOD,OAAO,CACXE,IADI,CACC,UAAAC,IAAI;AACR,QAAIA,IAAI,YAAYC,KAApB,EAA2B;AACzBR,MAAAA,WAAW,CAACO,IAAD,CAAX;AACA,aAAO,CAACA,IAAD,CAAP;AACD;;AACD,WAAO,CAACE,SAAD,EAAYF,IAAZ,CAAP;AACD,GAPI,WAQE,UAACN,KAAD;AACLD,IAAAA,WAAW,CAACC,KAAD,CAAX;AACA,WAAO,CAACA,KAAD,CAAP;AACD,GAXI,aAYI;AACP,QAAII,SAAJ,EAAeA,SAAS;AACzB,GAdI,CAAP;AAeD;;;;"}