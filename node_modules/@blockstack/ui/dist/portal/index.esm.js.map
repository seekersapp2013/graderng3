{"version":3,"file":"index.esm.js","sources":["../../src/portal/index.tsx"],"sourcesContent":["import { createContext, isBrowser, __DEV__ } from '../utils';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { usePortalManager } from './manager';\nimport { useSafeLayoutEffect } from '../hooks';\n\ntype PortalContext = HTMLDivElement | null;\n\nconst [PortalCtxProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n});\n\nexport interface PortalProps {\n  /**\n   * Function called when the portal mounts\n   */\n  onMount?(): void;\n  /**\n   * Function called when the portal unmounts\n   */\n  onUnmount?(): void;\n  /**\n   * Function that will be called to get the parent element\n   * that the portal will be attached to.\n   */\n  container?: () => HTMLElement;\n  /**\n   * The content or node you'll like to portal\n   */\n  children?: React.ReactNode;\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n */\nexport function Portal(props: PortalProps) {\n  const { onMount, onUnmount, children, container: containerProp } = props;\n\n  /**\n   * Generate the portal's dom node. We'll wrap the children\n   * in this dom node before mounting it.\n   */\n  const [portal] = React.useState(() => {\n    if (isBrowser) {\n      const div = document.createElement('div');\n      div.className = 'portal';\n      return div;\n    }\n    // for ssr\n    return null;\n  });\n\n  /**\n   * This portal might be nested in another portal.\n   * Let's read from the portal context to check this.\n   */\n  const parentPortal = usePortalContext();\n\n  /**\n   * If there's a PortalManager rendered, let's read from it.\n   * We use the portal manager to manage multiple portals\n   */\n  const manager = usePortalManager();\n\n  const append = React.useCallback(\n    (container: HTMLElement | null) => {\n      // if user specified a mount node, do nothing.\n      if (!portal || !container) return;\n\n      // else, simply append component to the portal node\n      container.appendChild(portal);\n    },\n    [portal]\n  );\n\n  useSafeLayoutEffect(() => {\n    // get the custom container from the container prop\n    const mountNode = containerProp?.();\n\n    /**\n     * We need to know where to mount this portal, we have 4 options:\n     * - If a mountRef is specified, we'll use that as the container\n     * - If portal is nested, use the parent portal node as container.\n     * - If it's not nested, use the manager's node as container\n     * - else use document.body as containers\n     */\n    const container = mountNode ?? parentPortal ?? manager?.node ?? document.body;\n\n    /**\n     * Append portal node to the computed container\n     */\n    append(container);\n\n    onMount?.();\n\n    return () => {\n      onUnmount?.();\n\n      if (!portal) return;\n\n      if (container?.contains(portal)) {\n        container?.removeChild(portal);\n      }\n    };\n  }, [containerProp, portal, parentPortal, onMount, onUnmount, manager && manager.node, append]);\n\n  const finalChildren = manager?.zIndex ? (\n    <div className=\"portal-zIndex\" style={{ zIndex: manager.zIndex }}>\n      {children}\n    </div>\n  ) : (\n    children\n  );\n\n  if (!portal) {\n    return <React.Fragment>{finalChildren}</React.Fragment>;\n  }\n\n  return createPortal(\n    <PortalCtxProvider value={portal}>{finalChildren}</PortalCtxProvider>,\n    portal\n  );\n}\n\nif (__DEV__) {\n  Portal.displayName = 'Portal';\n}\n"],"names":["createContext","strict","PortalCtxProvider","usePortalContext","Portal","props","onMount","onUnmount","children","containerProp","container","React","isBrowser","div","document","createElement","className","portal","parentPortal","manager","usePortalManager","append","appendChild","useSafeLayoutEffect","mountNode","node","body","contains","removeChild","finalChildren","zIndex","style","createPortal","value","__DEV__","displayName"],"mappings":";;;;;;;;;;;;;;;;;kCAQ8CA,aAAa,CAAgB;AACzEC,EAAAA,MAAM,EAAE;AADiE,CAAhB;IAApDC;IAAmBC;;SA+BVC,OAAOC;MACbC,UAA2DD,MAA3DC;MAASC,YAAkDF,MAAlDE;MAAWC,WAAuCH,MAAvCG;MAAqBC,gBAAkBJ,MAA7BK;;wBAMrBC,QAAA,CAAe;AAC9B,QAAIC,SAAJ,EAAe;AACb,UAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;AACAF,MAAAA,GAAG,CAACG,SAAJ,GAAgB,QAAhB;AACA,aAAOH,GAAP;AACD;;AAED,WAAO,IAAP;AACD,GARgB;MAAVI;;AAcP,MAAMC,YAAY,GAAGf,gBAAgB,EAArC;AAMA,MAAMgB,OAAO,GAAGC,gBAAgB,EAAhC;AAEA,MAAMC,MAAM,GAAGV,WAAA,CACb,UAACD,SAAD;AAEE,QAAI,CAACO,MAAD,IAAW,CAACP,SAAhB,EAA2B;AAG3BA,IAAAA,SAAS,CAACY,WAAV,CAAsBL,MAAtB;AACD,GAPY,EAQb,CAACA,MAAD,CARa,CAAf;AAWAM,EAAAA,mBAAmB,CAAC;;;AAElB,QAAMC,SAAS,GAAGf,aAAH,aAAGA,aAAH,uBAAGA,aAAa,EAA/B;AASA,QAAMC,SAAS,oBAAGc,SAAH,aAAGA,SAAH,cAAGA,SAAH,GAAgBN,YAAhB,yCAAgCC,OAAhC,aAAgCA,OAAhC,uBAAgCA,OAAO,CAAEM,IAAzC,uCAAiDX,QAAQ,CAACY,IAAzE;AAKAL,IAAAA,MAAM,CAACX,SAAD,CAAN;AAEAJ,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;AAEP,WAAO;AACLC,MAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS;AAET,UAAI,CAACU,MAAL,EAAa;;AAEb,UAAIP,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEiB,QAAX,CAAoBV,MAApB,CAAJ,EAAiC;AAC/BP,QAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEkB,WAAX,CAAuBX,MAAvB;AACD;AACF,KARD;AASD,GA7BkB,EA6BhB,CAACR,aAAD,EAAgBQ,MAAhB,EAAwBC,YAAxB,EAAsCZ,OAAtC,EAA+CC,SAA/C,EAA0DY,OAAO,IAAIA,OAAO,CAACM,IAA7E,EAAmFJ,MAAnF,CA7BgB,CAAnB;AA+BA,MAAMQ,aAAa,GAAG,CAAAV,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEW,MAAT,IACpBnB,aAAA,MAAA;AAAKK,IAAAA,SAAS,EAAC;AAAgBe,IAAAA,KAAK,EAAE;AAAED,MAAAA,MAAM,EAAEX,OAAO,CAACW;AAAlB;GAAtC,EACGtB,QADH,CADoB,GAKpBA,QALF;;AAQA,MAAI,CAACS,MAAL,EAAa;AACX,WAAON,aAAA,CAACA,QAAD,MAAA,EAAiBkB,aAAjB,CAAP;AACD;;AAED,SAAOG,YAAY,CACjBrB,aAAA,CAACT,iBAAD;AAAmB+B,IAAAA,KAAK,EAAEhB;GAA1B,EAAmCY,aAAnC,CADiB,EAEjBZ,MAFiB,CAAnB;AAID;;AAED,IAAIiB,OAAJ,EAAa;AACX9B,EAAAA,MAAM,CAAC+B,WAAP,GAAqB,QAArB;AACD;;;;"}