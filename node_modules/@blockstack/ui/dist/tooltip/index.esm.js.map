{"version":3,"file":"index.esm.js","sources":["../../src/tooltip/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, PropsOf } from '../box';\nimport { useTooltip, UseTooltipProps } from './hooks';\nimport { Portal } from '../portal';\nimport { isString, omit, pick } from '../utils';\nimport { VisuallyHidden } from '../visually-hidden';\n\nexport type TooltipProps = PropsOf<typeof Box> &\n  UseTooltipProps & {\n    /**\n     * The react component to use as the\n     * trigger for the tooltip\n     */\n    children?: React.ReactNode;\n    /**\n     * The label of the tooltip\n     */\n    label?: string;\n    /**\n     * The accessible, human friendly label to use for\n     * screen readers.\n     *\n     * If passed, tooltip will show the content `label`\n     * but expose only `aria-label` to assistive technologies\n     */\n    'aria-label'?: string;\n    /**\n     * If `true`, the tooltip will wrap it's children\n     * in a `<span/>` with `tabIndex=0`\n     */\n    shouldWrapChildren?: boolean;\n    /**\n     * If `true`, the tooltip will show an arrow tip\n     */\n    hasArrow?: boolean;\n  };\n\nexport function Tooltip(props: TooltipProps) {\n  const { children, label, shouldWrapChildren, 'aria-label': ariaLabel, hasArrow, ...rest } = props;\n\n  if (!label || label === '') {\n    const child = React.Children.only(children) as React.ReactElement;\n    return React.cloneElement(child, { ...child.props, ...rest });\n  }\n\n  const { isOpen, getTriggerProps, getTooltipProps, getArrowProps } = useTooltip(props);\n\n  let trigger: React.ReactElement;\n\n  if (isString(children) || shouldWrapChildren) {\n    trigger = (\n      <Box as=\"span\" tabIndex={0} {...getTriggerProps()}>\n        {children}\n      </Box>\n    );\n  } else {\n    // ensure tooltip has only one child node\n    const child = React.Children.only(children) as React.ReactElement;\n    trigger = React.cloneElement(child, getTriggerProps(child.props));\n  }\n\n  const hasAriaLabel = Boolean(ariaLabel);\n\n  const baseTooltipProps = getTooltipProps(rest);\n\n  const { style, ...tooltipProps } = hasAriaLabel\n    ? omit(baseTooltipProps, ['role', 'id'])\n    : baseTooltipProps;\n\n  const hiddenProps = pick(baseTooltipProps, ['role', 'id']);\n\n  return (\n    <React.Fragment>\n      {trigger}\n      {isOpen && (\n        <Portal>\n          <Box\n            paddingX=\"8px\"\n            paddingY=\"tight\"\n            bg=\"ink\"\n            color=\"white\"\n            borderRadius=\"6px\"\n            textStyle=\"caption.medium\"\n            maxWidth=\"320px\"\n            {...tooltipProps}\n            style={{\n              ...style,\n              useSelect: 'none',\n            }}\n          >\n            {label}\n            {hasAriaLabel && <VisuallyHidden {...hiddenProps}>{ariaLabel}</VisuallyHidden>}\n            {hasArrow && <Box data-arrow=\"\" bg=\"inherit\" {...getArrowProps()} />}\n          </Box>\n        </Portal>\n      )}\n    </React.Fragment>\n  );\n}\n"],"names":["Tooltip","props","children","label","shouldWrapChildren","ariaLabel","hasArrow","rest","child","React","only","useTooltip","isOpen","getTriggerProps","getTooltipProps","getArrowProps","trigger","isString","Box","as","tabIndex","hasAriaLabel","Boolean","baseTooltipProps","omit","style","tooltipProps","hiddenProps","pick","Portal","paddingX","paddingY","bg","color","borderRadius","textStyle","maxWidth","useSelect","VisuallyHidden"],"mappings":";;;;;;;;SAqCgBA,QAAQC;MACdC,WAAoFD,MAApFC;MAAUC,QAA0EF,MAA1EE;MAAOC,qBAAmEH,MAAnEG;MAAkCC,YAAiCJ,MAA/C;MAAyBK,WAAsBL,MAAtBK;MAAaC,qCAASN;;AAE5F,MAAI,CAACE,KAAD,IAAUA,KAAK,KAAK,EAAxB,EAA4B;AAC1B,QAAMK,KAAK,GAAGC,QAAA,CAAeC,IAAf,CAAoBR,QAApB,CAAd;AACA,WAAOO,YAAA,CAAmBD,KAAnB,qBAA+BA,KAAK,CAACP,KAArC,MAA+CM,IAA/C,EAAP;AACD;;oBAEmEI,UAAU,CAACV,KAAD;MAAtEW,qBAAAA;MAAQC,8BAAAA;MAAiBC,8BAAAA;MAAiBC,4BAAAA;;AAElD,MAAIC,OAAJ;;AAEA,MAAIC,QAAQ,CAACf,QAAD,CAAR,IAAsBE,kBAA1B,EAA8C;AAC5CY,IAAAA,OAAO,GACLP,aAAA,CAACS,GAAD;AAAKC,MAAAA,EAAE,EAAC;AAAOC,MAAAA,QAAQ,EAAE;OAAOP,eAAe,GAA/C,EACGX,QADH,CADF;AAKD,GAND,MAMO;AAEL,QAAMM,MAAK,GAAGC,QAAA,CAAeC,IAAf,CAAoBR,QAApB,CAAd;;AACAc,IAAAA,OAAO,GAAGP,YAAA,CAAmBD,MAAnB,EAA0BK,eAAe,CAACL,MAAK,CAACP,KAAP,CAAzC,CAAV;AACD;;AAED,MAAMoB,YAAY,GAAGC,OAAO,CAACjB,SAAD,CAA5B;AAEA,MAAMkB,gBAAgB,GAAGT,eAAe,CAACP,IAAD,CAAxC;;aAEmCc,YAAY,GAC3CG,IAAI,CAACD,gBAAD,EAAmB,CAAC,MAAD,EAAS,IAAT,CAAnB,CADuC,GAE3CA;MAFIE,aAAAA;MAAUC;;AAIlB,MAAMC,WAAW,GAAGC,IAAI,CAACL,gBAAD,EAAmB,CAAC,MAAD,EAAS,IAAT,CAAnB,CAAxB;AAEA,SACEd,aAAA,CAACA,QAAD,MAAA,EACGO,OADH,EAEGJ,MAAM,IACLH,aAAA,CAACoB,MAAD,MAAA,EACEpB,aAAA,CAACS,GAAD;AACEY,IAAAA,QAAQ,EAAC;AACTC,IAAAA,QAAQ,EAAC;AACTC,IAAAA,EAAE,EAAC;AACHC,IAAAA,KAAK,EAAC;AACNC,IAAAA,YAAY,EAAC;AACbC,IAAAA,SAAS,EAAC;AACVC,IAAAA,QAAQ,EAAC;KACLV;AACJD,IAAAA,KAAK,qBACAA,KADA;AAEHY,MAAAA,SAAS,EAAE;AAFR;IATP,EAcGlC,KAdH,EAeGkB,YAAY,IAAIZ,aAAA,CAAC6B,cAAD,oBAAoBX,YAApB,EAAkCtB,SAAlC,CAfnB,EAgBGC,QAAQ,IAAIG,aAAA,CAACS,GAAD;kBAAgB;AAAGc,IAAAA,EAAE,EAAC;KAAcjB,aAAa,GAAjD,CAhBf,CADF,CAHJ,CADF;AA2BD;;;;"}