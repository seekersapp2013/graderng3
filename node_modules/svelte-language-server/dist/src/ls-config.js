"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lsConfig = exports.LSConfigManager = void 0;
const lodash_1 = require("lodash");
/**
 * Default config for the language server.
 */
const defaultLSConfig = {
    typescript: {
        enable: true,
        diagnostics: { enable: true },
        hover: { enable: true },
        completions: { enable: true },
        definitions: { enable: true },
        findReferences: { enable: true },
        documentSymbols: { enable: true },
        codeActions: { enable: true },
        rename: { enable: true },
        selectionRange: { enable: true },
        signatureHelp: { enable: true }
    },
    css: {
        enable: true,
        globals: '',
        diagnostics: { enable: true },
        hover: { enable: true },
        completions: { enable: true, emmet: true },
        documentColors: { enable: true },
        colorPresentations: { enable: true },
        documentSymbols: { enable: true },
        selectionRange: { enable: true }
    },
    html: {
        enable: true,
        hover: { enable: true },
        completions: { enable: true, emmet: true },
        tagComplete: { enable: true },
        documentSymbols: { enable: true }
    },
    svelte: {
        enable: true,
        compilerWarnings: {},
        diagnostics: { enable: true },
        rename: { enable: true },
        format: { enable: true },
        completions: { enable: true },
        hover: { enable: true },
        codeActions: { enable: true },
        selectionRange: { enable: true }
    }
};
class LSConfigManager {
    constructor() {
        this.config = defaultLSConfig;
        this.listeners = [];
        this.tsUserPreferences = {
            typescript: {},
            javascript: {}
        };
        this.prettierConfig = {};
        this.emmetConfig = {};
    }
    /**
     * Updates config.
     */
    update(config) {
        var _a;
        // Ideally we shouldn't need the merge here because all updates should be valid and complete configs.
        // But since those configs come from the client they might be out of synch with the valid config:
        // We might at some point in the future forget to synch config settings in all packages after updating the config.
        this.config = lodash_1.merge({}, defaultLSConfig, this.config, config);
        // Merge will keep arrays/objects if the new one is empty/has less entries,
        // therefore we need some extra checks if there are new settings
        if ((_a = config.svelte) === null || _a === void 0 ? void 0 : _a.compilerWarnings) {
            this.config.svelte.compilerWarnings = config.svelte.compilerWarnings;
        }
        this.listeners.forEach((listener) => listener(this));
    }
    /**
     * Whether or not specified config is enabled
     * @param key a string which is a path. Example: 'svelte.diagnostics.enable'.
     */
    enabled(key) {
        return !!this.get(key);
    }
    /**
     * Get specific config
     * @param key a string which is a path. Example: 'svelte.diagnostics.enable'.
     */
    get(key) {
        return lodash_1.get(this.config, key);
    }
    /**
     * Get the whole config
     */
    getConfig() {
        return this.config;
    }
    /**
     * Register a listener which is invoked when the config changed.
     */
    onChange(callback) {
        this.listeners.push(callback);
    }
    updateEmmetConfig(config) {
        this.emmetConfig = config || {};
    }
    getEmmetConfig() {
        return this.emmetConfig;
    }
    updatePrettierConfig(config) {
        this.prettierConfig = config || {};
    }
    getPrettierConfig() {
        return this.prettierConfig;
    }
    updateTsJsUserPreferences(config) {
        ['typescript', 'javascript'].forEach((lang) => {
            var _a;
            if ((_a = config[lang]) === null || _a === void 0 ? void 0 : _a.preferences) {
                this._updateTsUserPreferences(lang, config[lang].preferences);
            }
        });
    }
    _updateTsUserPreferences(lang, config) {
        this.tsUserPreferences[lang] = Object.assign(this.tsUserPreferences[lang], {
            importModuleSpecifierPreference: config.importModuleSpecifier,
            importModuleSpecifierEnding: config.importModuleSpecifierEnding,
            includePackageJsonAutoImports: config.includePackageJsonAutoImports,
            quotePreference: config.quoteStyle
        });
    }
    getTsUserPreferences(lang) {
        return this.tsUserPreferences[lang];
    }
}
exports.LSConfigManager = LSConfigManager;
exports.lsConfig = new LSConfigManager();
//# sourceMappingURL=ls-config.js.map